const Database = require('better-sqlite3');

function validateMigration() {
  console.log('üîç Validando Migra√ß√£o V2...\n');

  try {
    const db = new Database('events.db', { readonly: true });
    
    let errors = [];
    let warnings = [];
    let success = [];

    // 1. Verificar se todas as tabelas foram criadas
    console.log('1Ô∏è‚É£ Verificando tabelas...');
    const requiredTables = [
      'departments', 'roles', 'permissions', 'user_permissions', 
      'role_permissions', 'audit_logs'
    ];

    const existingTables = db.prepare(`
      SELECT name FROM sqlite_master 
      WHERE type='table' AND name NOT LIKE 'sqlite_%'
    `).all().map(t => t.name);

    requiredTables.forEach(table => {
      if (existingTables.includes(table)) {
        success.push(`‚úÖ Tabela ${table} existe`);
      } else {
        errors.push(`‚ùå Tabela ${table} n√£o encontrada`);
      }
    });

    // 2. Verificar colunas da tabela users
    console.log('\n2Ô∏è‚É£ Verificando colunas da tabela users...');
    const userColumns = db.prepare(`PRAGMA table_info(users)`).all();
    const userColumnNames = userColumns.map(col => col.name);
    
    const requiredUserColumns = [
      'department_id', 'role_id', 'employee_code', 'hire_date', 
      'phone', 'manager_id', 'is_manager', 'status'
    ];

    requiredUserColumns.forEach(column => {
      if (userColumnNames.includes(column)) {
        success.push(`‚úÖ Coluna users.${column} existe`);
      } else {
        errors.push(`‚ùå Coluna users.${column} n√£o encontrada`);
      }
    });

    // 3. Verificar se permiss√µes foram inseridas
    console.log('\n3Ô∏è‚É£ Verificando permiss√µes...');
    const permissionCount = db.prepare('SELECT COUNT(*) as count FROM permissions').get().count;
    
    if (permissionCount > 0) {
      success.push(`‚úÖ ${permissionCount} permiss√µes inseridas`);
      
      // Verificar permiss√µes espec√≠ficas
      const criticalPermissions = [
        'users.create', 'users.read', 'users.update', 'users.delete',
        'departments.create', 'departments.read',
        'roles.create', 'roles.read',
        'admin.system'
      ];

      criticalPermissions.forEach(perm => {
        const exists = db.prepare('SELECT id FROM permissions WHERE code = ?').get(perm);
        if (exists) {
          success.push(`‚úÖ Permiss√£o ${perm} existe`);
        } else {
          errors.push(`‚ùå Permiss√£o cr√≠tica ${perm} n√£o encontrada`);
        }
      });
    } else {
      errors.push('‚ùå Nenhuma permiss√£o encontrada');
    }

    // 4. Verificar departamentos padr√£o
    console.log('\n4Ô∏è‚É£ Verificando departamentos...');
    const deptCount = db.prepare('SELECT COUNT(*) as count FROM departments').get().count;
    
    if (deptCount > 0) {
      success.push(`‚úÖ ${deptCount} departamentos criados`);
      
      // Verificar departamentos cr√≠ticos
      const criticalDepts = ['ADM', 'RH', 'FIN', 'TI'];
      criticalDepts.forEach(code => {
        const exists = db.prepare('SELECT id FROM departments WHERE code = ?').get(code);
        if (exists) {
          success.push(`‚úÖ Departamento ${code} existe`);
        } else {
          warnings.push(`‚ö†Ô∏è  Departamento ${code} n√£o encontrado`);
        }
      });
    } else {
      warnings.push('‚ö†Ô∏è  Nenhum departamento encontrado');
    }

    // 5. Verificar cargos padr√£o
    console.log('\n5Ô∏è‚É£ Verificando cargos...');
    const roleCount = db.prepare('SELECT COUNT(*) as count FROM roles').get().count;
    
    if (roleCount > 0) {
      success.push(`‚úÖ ${roleCount} cargos criados`);
      
      // Verificar cargos cr√≠ticos
      const criticalRoles = ['ADMIN', 'GER', 'ANA'];
      criticalRoles.forEach(code => {
        const exists = db.prepare('SELECT id FROM roles WHERE code = ?').get(code);
        if (exists) {
          success.push(`‚úÖ Cargo ${code} existe`);
        } else {
          warnings.push(`‚ö†Ô∏è  Cargo ${code} n√£o encontrado`);
        }
      });
    } else {
      warnings.push('‚ö†Ô∏è  Nenhum cargo encontrado');
    }

    // 6. Verificar √≠ndices
    console.log('\n6Ô∏è‚É£ Verificando √≠ndices...');
    const indexes = db.prepare(`
      SELECT name FROM sqlite_master 
      WHERE type='index' AND name LIKE 'idx_%'
    `).all();

    if (indexes.length > 0) {
      success.push(`‚úÖ ${indexes.length} √≠ndices criados`);
    } else {
      warnings.push('‚ö†Ô∏è  Nenhum √≠ndice personalizado encontrado');
    }

    // 7. Verificar integridade dos dados
    console.log('\n7Ô∏è‚É£ Verificando integridade dos dados...');
    
    // Verificar usu√°rios admin
    const adminUsers = db.prepare(`
      SELECT u.*, d.name as dept_name, r.name as role_name
      FROM users u
      LEFT JOIN departments d ON u.department_id = d.id
      LEFT JOIN roles r ON u.role_id = r.id
      WHERE u.user_type = 'admin'
    `).all();

    if (adminUsers.length > 0) {
      success.push(`‚úÖ ${adminUsers.length} usu√°rio(s) admin encontrado(s)`);
      
      adminUsers.forEach(user => {
        if (user.status === 'active') {
          success.push(`‚úÖ Admin ${user.username} est√° ativo`);
        } else {
          warnings.push(`‚ö†Ô∏è  Admin ${user.username} n√£o est√° ativo`);
        }
        
        if (user.dept_name) {
          success.push(`‚úÖ Admin ${user.username} tem departamento: ${user.dept_name}`);
        } else {
          warnings.push(`‚ö†Ô∏è  Admin ${user.username} sem departamento`);
        }
        
        if (user.role_name) {
          success.push(`‚úÖ Admin ${user.username} tem cargo: ${user.role_name}`);
        } else {
          warnings.push(`‚ö†Ô∏è  Admin ${user.username} sem cargo`);
        }
      });
    } else {
      errors.push('‚ùå Nenhum usu√°rio admin encontrado');
    }

    // 8. Testar consultas complexas
    console.log('\n8Ô∏è‚É£ Testando consultas complexas...');
    
    try {
      // Testar join complexo
      const complexQuery = db.prepare(`
        SELECT 
          u.username,
          c.name as company,
          d.name as department,
          r.name as role
        FROM users u
        LEFT JOIN companies c ON u.company_id = c.id
        LEFT JOIN departments d ON u.department_id = d.id
        LEFT JOIN roles r ON u.role_id = r.id
        WHERE u.user_type = 'admin'
        LIMIT 1
      `).get();

      if (complexQuery) {
        success.push('‚úÖ Consultas complexas funcionando');
      } else {
        warnings.push('‚ö†Ô∏è  Consulta complexa retornou vazio');
      }
    } catch (error) {
      errors.push(`‚ùå Erro em consulta complexa: ${error.message}`);
    }

    // 9. Verificar foreign keys
    console.log('\n9Ô∏è‚É£ Verificando foreign keys...');
    
    try {
      // Verificar se foreign keys est√£o ativas
      const fkStatus = db.prepare('PRAGMA foreign_keys').get();
      if (fkStatus && fkStatus.foreign_keys) {
        success.push('‚úÖ Foreign keys habilitadas');
      } else {
        warnings.push('‚ö†Ô∏è  Foreign keys n√£o habilitadas');
      }

      // Testar integridade
      const integrityCheck = db.prepare('PRAGMA integrity_check').get();
      if (integrityCheck && integrityCheck.integrity_check === 'ok') {
        success.push('‚úÖ Integridade do banco OK');
      } else {
        errors.push('‚ùå Problemas de integridade detectados');
      }
    } catch (error) {
      warnings.push(`‚ö†Ô∏è  Erro ao verificar foreign keys: ${error.message}`);
    }

    db.close();

    // 10. Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL DA VALIDA√á√ÉO\n');
    
    console.log('üéâ SUCESSOS:');
    success.forEach(msg => console.log(`  ${msg}`));
    
    if (warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  AVISOS:');
      warnings.forEach(msg => console.log(`  ${msg}`));
    }
    
    if (errors.length > 0) {
      console.log('\n‚ùå ERROS:');
      errors.forEach(msg => console.log(`  ${msg}`));
    }

    console.log('\nüìà ESTAT√çSTICAS:');
    console.log(`  ‚úÖ Sucessos: ${success.length}`);
    console.log(`  ‚ö†Ô∏è  Avisos: ${warnings.length}`);
    console.log(`  ‚ùå Erros: ${errors.length}`);

    const successRate = (success.length / (success.length + warnings.length + errors.length)) * 100;
    console.log(`  üìä Taxa de sucesso: ${successRate.toFixed(1)}%`);

    if (errors.length === 0) {
      console.log('\nüéâ MIGRA√á√ÉO VALIDADA COM SUCESSO!');
      console.log('‚úÖ O sistema est√° pronto para uso.');
      
      if (warnings.length > 0) {
        console.log('\nüí° Recomenda√ß√µes:');
        console.log('- Revisar os avisos acima');
        console.log('- Executar testes de funcionalidade');
        console.log('- Verificar dados espec√≠ficos da empresa');
      }
    } else {
      console.log('\n‚ùå MIGRA√á√ÉO COM PROBLEMAS!');
      console.log('üîß A√ß√µes necess√°rias:');
      console.log('- Corrigir os erros listados acima');
      console.log('- Re-executar a migra√ß√£o se necess√°rio');
      console.log('- Restaurar backup se necess√°rio');
    }

    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Se tudo OK: node test_employee_creation.js');
    console.log('2. Iniciar desenvolvimento dos endpoints');
    console.log('3. Implementar interface de setores');
    console.log('4. Testar permiss√µes granulares');

    return errors.length === 0;

  } catch (error) {
    console.error('\nüí• Erro durante valida√ß√£o:', error);
    console.log('\nüîß Poss√≠veis causas:');
    console.log('- Banco de dados n√£o existe');
    console.log('- Migra√ß√£o n√£o foi executada');
    console.log('- Arquivo corrompido');
    console.log('\nüí° Solu√ß√µes:');
    console.log('- Execute: node run_migration.js');
    console.log('- Verifique se events.db existe');
    console.log('- Restaure backup se necess√°rio');
    
    return false;
  }
}

// Executar valida√ß√£o
const isValid = validateMigration();
process.exit(isValid ? 0 : 1); 