const fetch = require('node-fetch');

const API_BASE_URL = 'http://localhost:3001/api';

async function testEmployeeCreation() {
  console.log('üß™ Testando Sistema de Cadastro de Funcion√°rios\n');

  try {
    // 1. Buscar empresas dispon√≠veis
    console.log('1Ô∏è‚É£ Buscando empresas...');
    const companiesResponse = await fetch(`${API_BASE_URL}/companies`);
    const companies = await companiesResponse.json();
    
    if (companies.length === 0) {
      console.log('‚ùå Nenhuma empresa encontrada. Crie uma empresa primeiro.');
      return;
    }
    
    console.log(`‚úÖ ${companies.length} empresa(s) encontrada(s)`);
    const testCompany = companies[0];
    console.log(`üìã Usando empresa: ${testCompany.name} (ID: ${testCompany.id})\n`);

    // 2. Teste de valida√ß√µes - Username muito curto
    console.log('2Ô∏è‚É£ Testando valida√ß√£o: Username muito curto...');
    const testInvalidUsername = {
      username: 'ab', // Muito curto
      password: '123456',
      full_name: 'Teste Funcion√°rio',
      company_id: testCompany.id,
      can_view_documentacao: true
    };

    const invalidUsernameResponse = await fetch(`${API_BASE_URL}/users`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testInvalidUsername)
    });

    if (!invalidUsernameResponse.ok) {
      const error = await invalidUsernameResponse.json();
      console.log(`‚úÖ Valida√ß√£o funcionando: ${error.error}\n`);
    } else {
      console.log('‚ùå Valida√ß√£o de username n√£o funcionou\n');
    }

    // 3. Teste de valida√ß√µes - Email inv√°lido
    console.log('3Ô∏è‚É£ Testando valida√ß√£o: Email inv√°lido...');
    const testInvalidEmail = {
      username: 'teste.funcionario',
      password: '123456',
      email: 'email-invalido', // Email inv√°lido
      full_name: 'Teste Funcion√°rio',
      company_id: testCompany.id,
      can_view_documentacao: true
    };

    const invalidEmailResponse = await fetch(`${API_BASE_URL}/users`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testInvalidEmail)
    });

    if (!invalidEmailResponse.ok) {
      const error = await invalidEmailResponse.json();
      console.log(`‚úÖ Valida√ß√£o funcionando: ${error.error}\n`);
    } else {
      console.log('‚ùå Valida√ß√£o de email n√£o funcionou\n');
    }

    // 4. Teste de cria√ß√£o v√°lida (SE for admin)
    console.log('4Ô∏è‚É£ Testando cria√ß√£o v√°lida...');
    console.log('‚ö†Ô∏è  NOTA: Este teste falhar√° se n√£o houver admin autenticado');
    console.log('   Para testar completamente, fa√ßa login como admin primeiro\n');
    
    const validEmployee = {
      username: `teste.${Date.now()}`, // Username √∫nico
      password: '123456',
      email: 'teste@exemplo.com',
      full_name: 'Funcion√°rio de Teste',
      department: 'Teste',
      company_id: testCompany.id,
      can_view_denuncias: false,
      can_view_documentacao: true,
      can_view_naoconformidades: false,
      can_view_empresas: false
    };

    const validResponse = await fetch(`${API_BASE_URL}/users`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(validEmployee)
    });

    if (validResponse.ok) {
      const newUser = await validResponse.json();
      console.log(`‚úÖ Funcion√°rio criado com sucesso: ${newUser.full_name}`);
      console.log(`   Username: ${newUser.username}`);
      console.log(`   Empresa: ${newUser.company_name}\n`);
    } else {
      const error = await validResponse.json();
      if (error.error === 'Usu√°rio n√£o autenticado' || error.error === 'Acesso negado. Apenas administradores podem realizar esta opera√ß√£o.') {
        console.log(`‚ö†Ô∏è  Como esperado: ${error.error}`);
        console.log('   Middleware de autentica√ß√£o funcionando corretamente!\n');
      } else {
        console.log(`‚ùå Erro inesperado: ${error.error}\n`);
      }
    }

    // 5. Teste de username duplicado
    console.log('5Ô∏è‚É£ Testando valida√ß√£o: Username duplicado...');
    
    // Tentar criar com username 'admin' que j√° existe
    const duplicateUsername = {
      username: 'admin', // J√° existe
      password: '123456',
      full_name: 'Teste Duplicado',
      company_id: testCompany.id
    };

    const duplicateResponse = await fetch(`${API_BASE_URL}/users`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(duplicateUsername)
    });

    if (!duplicateResponse.ok) {
      const error = await duplicateResponse.json();
      if (error.error === 'Nome de usu√°rio j√° existe') {
        console.log(`‚úÖ Valida√ß√£o funcionando: ${error.error}\n`);
      } else {
        console.log(`‚ö†Ô∏è  Outro erro (pode ser auth): ${error.error}\n`);
      }
    } else {
      console.log('‚ùå Valida√ß√£o de username duplicado n√£o funcionou\n');
    }

    console.log('üéâ Testes conclu√≠dos!');
    console.log('\nüìä Resumo:');
    console.log('‚úÖ Valida√ß√µes de campo funcionando');
    console.log('‚úÖ Middleware de autentica√ß√£o ativo');
    console.log('‚úÖ Valida√ß√£o de username duplicado funcionando');
    console.log('\nüí° Para testar cria√ß√£o completa: fa√ßa login como admin primeiro');

  } catch (error) {
    console.error('üí• Erro durante os testes:', error.message);
  }
}

// Executar testes
testEmployeeCreation(); 